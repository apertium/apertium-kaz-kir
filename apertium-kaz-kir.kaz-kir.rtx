!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

n_number = (ND "") sg pl sp ND;
v_number = (ND sg) sg pl sp ND;
gender = (GD m) m f mf GD;

det_type = def ind dem itg qnt;
prn_type = dem ind pers itg ;

v_type = iv tv vaux cop ;

tense = pres past fut ifi fut aor ;
vadj = gpr_past gpr_impf gpr_fut gpr_hab gpr_pot gpr_ppot;
vadv = gna_perf gna_impf ;
ger = ger_past ger_fut ;
inf = prc_perf prc_impf prc_vol prc_cond prc_fplan prc_plan ;
nonfin = [vadj] [vadv] [ger] [inf] ;
fin_nonfin = [tense] [vadj] [vadv] [ger] [inf] ;

polarity = neg ;

possession = px1sg px1pl px2sg px2pl px3sp ;

case = (CD nom) nom acc gen dat loc abl ins CD ;

n_person = (PD p3) p1 p2 p3 PD ;
v_person = (PD "") p1 p2 p3 PD ;
formality = frm ;

transitivity = (TD iv) tv iv ;
voice = caus pass coop ;
voice_a = [voice] ;
voice_b = [voice] ;
voice_c = [voice] ;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!


adj: _ ;
AP: _ ;
aP: _ ;

adv: _ ;

vaux_fin: _.polarity.fin_nonfin.v_person.formality.v_number ;
vaux_vadj: _.polarity.fin_nonfin ;  ! FIXME: allow for subst
vaux_inf: _.polarity.fin_nonfin ;
v_inf_vol: _.polarity.fin_nonfin.v_person.formality.v_number ;
v_vadv: _.polarity.fin_nonfin ;
v_ger: _.polarity.fin_nonfin.n_number.possession.formality.case ;


v_fin: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.v_person.formality.v_number ;
v_vadj: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;  ! FIXME: allow for subst
v_vadv: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;
v_inf: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;
v_inf_vol: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.v_person.formality.v_number ;
v_ger: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.n_number.possession.formality.case ;

!vP: _.v_type.voice_a.voice_b.voice_c.fin_nonfin.polarity.v_person.formality.v_number ;
vP_fin: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.v_person.formality.v_number ;
vP_vadj: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;  ! FIXME: allow for subst
vP_vadv: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;
vP_inf: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin ;
vP_inf_vol: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.v_person.formality.v_number ;
vP_ger: _.transitivity.voice_a.voice_b.voice_c.polarity.fin_nonfin.n_number.possession.formality.case ;

cop_fin: _.tense.polarity.v_person.formality.v_number ;
cop_ger: _.ger.n_number.possession.formality.case ;


VP: _.transitivity.voice_a.voice_b.voice_c.fin_nonfin.polarity.v_person.formality.v_number ;

n: _.n_number.possession.case ;
nP: _.n_number.possession.case ;
NP: _.n_number.possession.case ;

prn_pers: _.prn_type.v_person.formality.n_number.case ;
prn_dem: _.prn_type.n_number.case ;  ! also for itg

det_default: _.det_type;
det_def: _.det_type.n_number;

PP: _ ;

S: _ ;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tense > tense : pres aor ;  ! ifi past, pri pres, fti fut;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!

det: (if (1.det_type = def or 1.det_type = ind)
         1(det_def)
      else
         1(det_default));

prn: (if (1.prn_type = pers)
			1(prn_pers)
		else
			1(prn_dem) ! also for itg
		);

vaux: (if (1.fin_nonfin in tense)
			1(vaux_fin)
		elseif (1.fin_nonfin in vadj)
			1(vaux_vadj)
		elseif (1.fin_nonfin in vadv)
			1(vaux_vadv)
		elseif ((1.fin_nonfin in inf) and (1.fin_nonfin = prc_vol))
			1(vaux_inf_vol)
		elseif (1.fin_nonfin in inf)
			1(vaux_inf)
		elseif (1.fin_nonfin in ger)
			1(vaux_ger)
		);

v: (if (1.fin_nonfin in tense)
			1(v_fin)
		elseif (1.fin_nonfin in vadj)
			1(v_vadj)
		elseif (1.fin_nonfin in vadv)
			1(v_vadv)
		elseif ((1.fin_nonfin in inf) and (1.fin_nonfin = prc_vol))
			1(v_inf_vol)
		elseif (1.fin_nonfin in inf)
			1(v_inf)
		elseif (1.fin_nonfin in ger)
			1(v_ger)
		);

vP: (if (1.fin_nonfin in tense)
			1(vP_fin)
		elseif (1.fin_nonfin in vadj)
			1(vP_vadj)
		elseif (1.fin_nonfin in vadv)
			1(vP_vadv)
		elseif ((1.fin_nonfin in inf) and (1.fin_nonfin = prc_vol))
			1(vP_inf_vol)
		elseif (1.fin_nonfin in inf)
			1(vP_inf)
		elseif (1.fin_nonfin in ger)
			1(vP_ger)
		);

cop: (if (1.fin_nonfin in tense)
			1(cop_fin)
		elseif (1.fin_nonfin in ger)
			1(cop_ger)
		);


!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

PP ->
		NP ?(1.case=ins) [$lemh=менен] { 1[case=nom] _ менен@post } ;

NP -> ! n.$number adj { 2[gender=1.gender, number=1.number] _1 1 } ;
		%nP { %1 } |
		AP %nP { 1 _1 2 } |
		det %nP { 1 _1 2 } |
		det AP %nP { 1 _1 2 _2 3 } |
		%prn { 1 } |
		NP.gen %NP.px3sp { 1 2 } ;

nP ->
		%n { %1 } |
		n %n ?((1.possession = "") and (2.possession = px3sp)) { 1 _1 2 } ;

aP ->
		adj { 1 } |
		adv adj { 1 _1 2 } ;

AP ->
		aP { 1 } ;

vP ->
		%vaux { 1 } |
		1: %v { 1 } |
		2: %v ?(1.vadj/sl=gpr_impf) { 1[fin_nonfin=prc_impf] _ тур@vaux.gpr_past } |
		%cop { 1 } |
		vP %vP ?((1.fin_nonfin in inf) and (2.v_type=vaux)) [$lemh=1.lemh] { 1 _1 2 } ;

VP ->
		NP %э@vP { 1 + 2 } |
		AP %э@vP { 1 + 2 } |
		NP.acc %vP { 1 _1 2 } |
		PP %vP { 1 _1 2 } |
		PP NP %vP { 1 _1 2 _2 3 } ;

S ->
		NP VP { 1 _1 2 } ;

! Resources:
! http://wiki.apertium.org/wiki/Apertium-recursive
! http://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! http://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
